#+TITLE: C/C++ Programming in Emacs
#+DATE: <2017-09-01>
#+LAYOUT: post
#+TAGS: Emacs, C/C++
#+CATEGORIES:

* Introduction
C/C++ is a pretty popular programming language, especially for work requiring high efficiency, such as embedded system and efficient algorithm. I am doing robotics research and sometimes I have to program some hardware, like microcontrollers, and I also need to write some ROS code to control the robot or run simulations where C/C++ plays an important role. This post is intended to show how to set up a C/C++ programming environment in Emacs.

#+HTML: <!--more-->

This configuration contains some basic functions for C/C++ programming: =projec management=, =code completion=, =code navigation= and =syntax checking=. The integral configuration in this post is from my [[https://github.com/wuliuxiansheng/Emacs_Configuration][Emacs configuration]] and the overall configuration introduction is [[http://www.seas.upenn.edu/~chaoliu/2017/01/03/emacs_configuration/][here]].

* Basic Editor Configuration
This part is already described in another post [[http://www.seas.upenn.edu/~chaoliu/2017/09/01/python-programming-in-emacs/][Python Programming in Emacs]].

* C/C++ Programming
** Project Management
See [[http://www.seas.upenn.edu/~chaoliu/2017/09/01/python-programming-in-emacs/][Project Management]] section in another post about Python programming.
** Code Completion and Navigation
In order to do code completion for C/C++ programming, a persistent database of references, declarations, definitions and symbol names is required for each C/C++ project. [[http://cedet.sourceforge.net/][CEDET]] and [[http://www.rtags.net][RTags]] are used to generate database for different C/C++ project. =CEDET= is a built-in package since Emacs 23.2 which is developed purely by Elisp, so it is almost a ready-to-go package for most users but it is also not very efficient for big C/C++ projects. =RTags= is C/C++ indexer with integration for Emacs based on clang and it is faster than CEDET but also more complicated to configure and use.

*** CEDET
=CEDET= is a Collection of Emacs Development Environment Tools written with the end goal of creating an advanced development environment in Emacs [fn:1]. Since it is already merged into Emacs distribution since Emacs 23.2, we just need to enable its basic functions by the following code:
#+BEGIN_SRC emacs-lisp
  (require 'semantic)
  (global-semanticdb-minor-mode 1)
  (global-semantic-idle-scheduler-mode 1)
  (semantic-mode 1)
  (semantic-enable)
#+END_SRC
With these lines of code, Semantic mode is enabled, SemanticDB mode is enabled and ensures that the source code is automatically reparsed whenever Emacs is idle. There are also some other customizable options which you can find them [[https://www.gnu.org/software/emacs/manual/html_node/semantic/index.html#Top][Semantic Manual]]. Semantic mode is not just for C/C++ but also Python, HTML and so on. There are better completion tools for Python and HTML so that I don't want to enable Semantic for them. Add following code to remove Semantic mode for Python mode and HTML mode:
#+BEGIN_SRC emacs-lisp
  (setq semantic-new-buffer-setup-functions
        (remove-if (lambda (buffer-setup-function)
                     (member (car buffer-setup-function)
                             '(python-mode html-mode)))
                   semantic-new-buffer-setup-functions))

  (remove-hook 'python-mode-hook 'wisent-python-default-setup)
#+END_SRC
Then the corresponding completion backend has to be added to to the backends of [[http://company-mode.github.io][company-mode]] by the following code:
#+BEGIN_SRC emacs-lisp
  (defun company-semantic-setup ()
    "Configure company-backends for company-semantic and company-yasnippet."
    (delete 'company-irony company-backends)
    (push '(company-semantic :with company-yasnippet) company-backends)
    )
#+END_SRC
completion backend for yasnippet is also added to the backends of company-mode.

For a C/C++ project, in order to do code completion in project sense, CEDET has to know the structure of a project, or Semantic will only look for header files in current directory by default. EDE, short for Emacs Development Environment can be used as the interface for managing projects. EDE organizes files into projects, which correspond to directory trees [fn:2]. The project root is the topmost directory of a project. EDE is enabled and project configuration file ~cc-mode-projects.el~ in =.emacs.d=, if existed, is loaded by the following code:
#+BEGIN_SRC emacs-lisp
  (global-ede-mode 1)

  (setq ede-custom-file (expand-file-name "cc-mode-projects.el" user-emacs-directory))
  (when (file-exists-p ede-custom-file)
    (load ede-custom-file))
#+END_SRC
In EDE project configuration file, user can configure a project in this form:
#+BEGIN_SRC emacs-lisp
  (ede-cpp-root-project "project_name"
                        :file "dir/to/project/project_root/Makefile"
                        :include-path '("user_include1"
                                        "user_include2")
                        :system-include-path '("sys_include1"
                                               "sys_include2"))
#+END_SRC
~:include-path~ specifies local directories of the project relative to the project root specified by ~:file~ that EDE should search first. ~:system-include-path~ specifies system header files path that are not belong to the project.

Another important part is header files completion. [[https://github.com/randomphrase/company-c-headers][company-c-headers]] works pretty well with company mode. Add the following code to Emacs configuration to enable this package after installation:
#+BEGIN_SRC emacs-lisp
  (defun company-c-headers-setup ()
    (add-to-list 'company-backends 'company-c-headers))
#+END_SRC
Then configure header file paths for company-c-header in order to do header files completion. Header file paths vary with projects, including system header files and local header files. EDE can return system header files path for company-c-header by the following code:
#+BEGIN_SRC emacs-lisp
  (defun ede-object-system-include-path ()
    (when ede-object
      (ede-system-include-path ede-object)))
  (setq company-c-headers-path-system 'ede-object-system-include-path)
#+END_SRC
and local header files can be defined in ~cc-mode-header-custom.el~ in =.emacs.d= defining some relative paths which are common to all projects:
#+BEGIN_SRC emacs-lisp
  (setq header-custom-file (expand-file-name "cc-mode-header-custom.el" user-emacs-directory))
  (when (file-exists-p header-custom-file)
    (load header-custom-file))
#+END_SRC

Finally, loading these two setup functions for C/C++ mode in Emacs by adding hooks:
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'company-c-headers-setup)
  (add-hook 'c-mode-hook 'company-c-headers-setup)
  (add-hook 'c++-mode-hook 'company-semantic-setup)
  (add-hook 'c-mode-hook 'company-semantic-setup)
#+END_SRC
With these configurations, when opening a ~.c~ or ~.cpp~ file in Emacs, CEDET will parse the project and =.emacs.d/semanticdb/= is created accordingly. Then you can do code completion, navigation and some other cool features provided by CEDET. More detailed information can be found in [[http://cedet.sourceforge.net][CEDET project page]] and [[http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html][this post]] [fn:3].

*** RTags
RTags is a client/server application that indexes C/C++ code and keeps a persistent file-based database of references, declarations, definitions, symbolnames etc [fn:4]. The package is based on clang so that it is faster than CEDET but some external tools are required, including =LLVM/Clang= (>= 3.3) =GCC/Clang= (>= 4.7/3.2) and =cmake= (>= 2.8). In Emacs, load RTags with the following code after installation:
#+BEGIN_SRC emacs-lisp
  (rtags-enable-standard-keybindings)
  (setq rtags-autostart-diagnostics t)
  (rtags-diagnostics)
#+END_SRC
~rtags-diagnostics~ is used to start an asynchronous process in a buffer to receive warnings/errors from clang whenever a file gets reindexed. It integrates with =flymake= to put highlighting on code with warnings and errors [fn:4].

=company-rtags= is used for code completion. It can be configured with the following function, including header files completion:
#+BEGIN_SRC emacs-lisp
  (defun company-rtags-setup ()
    "Configure company-backends for company-rtags."
    (delete 'company-semantic company-backends)
    (setq rtags-completions-enabled t)
    (push '(company-rtags :with company-yasnippet) company-backends))
#+END_SRC

Finally, loading RTags and these configurations by adding hooks:
#+BEGIN_SRC emacs-lisp
  (rtags-start-process-unless-running)
  (add-hook 'c++-mode-hook 'company-rtags-setup)
  (add-hook 'c-mode-hook 'company-rtags-setup)
#+END_SRC

After installing required packages and loading these configurations, before working on C/C++ projects, run ~rtags-install~ in Emacs to finish installation. RTags needs to know the compile flags and =compile_commands.json= can be generated by various tools depending on your project build system. Once the compile flags is generated, run ~.emacs/path/to/rc -J /path/to/directory/containing/compile_commands.json~ to tell =rdm= about the compile flags. Then Emacs is ready for C/C++ programming.
** Syntax Checking and Formatting
RTags can be integrated with [[http://www.flycheck.org/en/latest/][Flycheck]] by =flycheck-rtags= package using the following function:
#+BEGIN_SRC emacs-lisp
  (require 'flycheck-rtags)
  (defun flycheck-rtags-setup ()
    "Configure flycheck-rtags."
    (flycheck-select-checker 'rtags)
    (setq-local flycheck-highlighting-mode nil)
    (setq-local flycheck-check-syntax-automatically nil))
#+END_SRC
Then just add hooks for C/C++ code by:
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'flycheck-rtags-setup)
  (add-hook 'c-mode-hook 'flycheck-rtags-setup)
#+END_SRC
[[https://github.com/sonatard/clang-format][clang-format]] is used to format C/C++ code automatically by the following code:
#+BEGIN_SRC emacs-lisp
  (defun clang-format-on-save ()
    (add-hook 'before-save-hook #'clang-format-buffer nil 'local))
  (add-hook 'c++-mode-hook 'clang-format-on-save)
  (add-hook 'c-mode-hook 'clang-format-on-save)
#+END_SRC
C/C++ codes are formatted automatically when saved. The desired format can be configured by adding clang-format style option (~setq clang-format-style-option "option"~) or generating =clang-format= from [[https://zed0.co.uk/clang-format-configurator/][this configurator]]. For better programming experiences, Emacs cc-mode style should be correspondent with your clang-format. Refer to [[https://www.gnu.org/software/emacs/manual/html_node/ccmode/Customizing-Indentation.html#Customizing-Indentation][Customizing Indentation]] for more details.
** Others
*** CMake
[[https://cmake.org/][CMake]] is a commonly used tool to build C/C++ projects. Install =cmake-mode= and add the following to enable it:
#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
        (append
         '(("CMakeLists\\.txt\\'" . cmake-mode))
         '(("\\.cmake\\'" . cmake-mode))
         auto-mode-alist))
#+END_SRC
And then configure =company-cmake= by the following:
#+BEGIN_SRC emacs-lisp
  (defun company-cmake-setup ()
    (add-to-list 'company-backends 'company-cmake))
  (add-hook 'cmake-mode-hook 'company-cmake-setup)
#+END_SRC
*** Commands for Embedded Systems
For microcontroller programming, there are three commonly used commands: ~make~, ~make flash~ and ~make clean~. ~make~ is used to build the project and generate the =.hex= file, ~make flash~ is used to load the =.hex= file to the microcontroller and ~make clean~ is used to clean all generated files. I made three interactive functions for these three commands and map them to three keybindings by the following:
#+BEGIN_SRC emacs-lisp
  (defun cc-mode-compile-make ()
    (interactive)
    (setq compile-command "cd ../ && make")
    (call-interactively 'compile))
  (defun cc-mode-compile-flash ()
    (interactive)
    (setq compile-command "cd ../ && make flash")
    (call-interactively 'compile))
  (defun cc-mode-compile-clean ()
    (interactive)
    (setq compile-command "cd ../ && make clean")
    (call-interactively 'compile))
  (defun cc-mode-compile ()
    (local-set-key (kbd "C-x C m") 'cc-mode-compile-make)
    (local-set-key (kbd "C-x C f") 'cc-mode-compile-flash)
    (local-set-key (kbd "C-x C c") 'cc-mode-compile-clean))

  (add-hook 'c-mode-hook 'cc-mode-compile)
  (add-hook 'c++-mode-hook 'cc-mode-compile)
#+END_SRC
Then when editing C/C++ embedded code, user can call these commands more conveniently without opening a shell. The reason why all three commands have ~cd ..~ is that, for me, the =Makefile= is on top of source files and header files.
*** Switch between CEDET and RTags
For a project, we use either CEDET or RTags/Irony-Mode. Two interactive functions are made to switch from one to another by the following:
#+BEGIN_SRC emacs-lisp
  (defun cedet-enable ()
    "Start CEDET."
    (interactive)
    (remove-hook 'c++-mode-hook 'company-rtags-setup)
    (remove-hook 'c-mode-hook 'company-rtags-setup)
    (remove-hook 'c++-mode-hook 'flycheck-rtags-setup)
    (remove-hook 'c-mode-hook 'flycheck-rtags-setup)
    (semantic-enable)
    (add-hook 'c++-mode-hook 'company-c-headers-setup)
    (add-hook 'c-mode-hook 'company-c-headers-setup)
    (add-hook 'c++-mode-hook 'company-semantic-setup)
    (add-hook 'c-mode-hook 'company-semantic-setup)
    )

  (defun irony-enable ()
    "Start irony mode."
    (interactive)
    (semantic-disable)
    (remove-hook 'c++-mode-hook 'company-c-headers-setup)
    (remove-hook 'c-mode-hook 'company-c-headers-setup)
    (remove-hook 'c++-mode-hook 'company-semantic-setup)
    (remove-hook 'c-mode-hook 'company-semantic-setup)
    (rtags-start-process-unless-running)
    (add-hook 'c++-mode-hook 'company-rtags-setup)
    (add-hook 'c-mode-hook 'company-rtags-setup)
    (add-hook 'c++-mode-hook 'flycheck-rtags-setup)
    (add-hook 'c-mode-hook 'flycheck-rtags-setup)
    )
#+END_SRC

* Footnotes

[fn:1] CEDET Project Page, http://cedet.sourceforge.net

[fn:2] Emacs Development Environment, https://www.gnu.org/software/emacs/manual/html_node/emacs/EDE.html

[fn:3] A Gentle introduction to CEDET, http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html

[fn:4] RTags GitHub Repo, https://github.com/Andersbakken/rtags
